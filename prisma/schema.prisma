// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth 모델
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookReviews   BookReview[]
  following     Follow[]  @relation("UserFollowing")
  followers     Follow[]  @relation("UserFollowers")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String   // 팔로우를 하는 사용자
  followingId String   // 팔로우를 받는 사용자
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) // 중복 팔로우 방지
  @@index([followerId])
  @@index([followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 책장 애플리케이션 모델
model Book {
  id          String   @id @default(cuid())
  googleId    String?  @unique // Google Books API ID
  title       String
  author      String?
  publisher   String?
  publishedDate String?
  description String?
  thumbnail   String?
  isbn        String?
  reviews     BookReview[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BookReview {
  id        String   @id @default(cuid())
  bookId    String
  userId    String
  rating    Int      // 1-5 별점
  review    String   // 독후감
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([bookId, userId]) // 한 사용자당 한 책에 하나의 리뷰만
}
